1.1

Verify all authentication controls are enforced on the server side







1.2

Verify all authentication controls fail securely to ensure attackers cannot log in







1.3

Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords







1.4

Verify that the changing password functionality includes the old password, the new password, and a password confirmation







1.5

Verify that the forgotten password function and other recovery paths do not reveal the current password and that the new password is not sent in clear text to the user







1.6

Verify that information enumeration is not possible via login, password reset, or forgot account functionality







1.7

Verify there are no default passwords in use for the application framework or any components used by the application







1.8

Verify that measures are in place to block the use of commonly chosen passwords and weak passphrases







1.9

Verify that if shared knowledge based questions are required, the questions do not violate privacy laws and are sufficiently strong to protect accounts from malicious recovery.







1.10

Verify that administrative interfaces are not accessible to untrusted parties







2.1

Verify that sessions are invalidated when the user logs out







2.2

Verify that sessions timeout after a specified period of inactivity







2.3

Verify that all pages that require authentication have easy and visible access to logout functionality







2.4

Verify that the session id is never disclosed in URLs, error messages, or logs. This includes verifying that the application does not support URL rewriting of session cookies







2.5

Verify that all successful authentication and re-authentication generates a new session and session id







2.6

Verify that session ids are sufficiently long, random and unique across the correct active session base







2.7

Verify that session ids stored in cookies have their path set to an appropriately restrictive value, and authentication session tokens additionally set the “HttpOnly” and “secure” attributes







3.1

Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization privilege







3.2

Verify that access to sensitive records is protected, such that only authorized objects or data is accessible to each user







3.3

Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata







3.4

Verify that access controls fail securely







3.5

Verify that the same access control rules implied by the presentation layer are enforced on the server side







3.6

Verify that the application or framework uses strong random anti-CSRF tokens or has another transaction protection mechanism







3.7

Verify that the application correctly enforces context-sensitive authorisation so as to not allow unauthorised manipulation by means of parameter tampering







4.1

Verify that server side input validation failures result in request rejection and are logged







4.2

Verify that input validation routines are enforced on the server side







4.3

Verify that all SQL queries and stored procedures are protected by the use of prepared statements and parameter binding, and thus not susceptible to SQL injection







4.4

Ensure that all string variables placed into HTML or other web client code is either properly contextually encoded manually, or utilize templates that automatically encode contextually







5.1

Verify that the application does not output error messages or stack traces containing sensitive data that could assist an attacker

 Y (by default)





5.2

Verify that an audit log or similar allows for non-repudiation of key transactions







6.1

Verify that all forms containing sensitive information have disabled client side caching, including autocomplete features







6.2

Verify that all sensitive data is sent to the server in the HTTP message body or headers







6.3

Verify that the application sets appropriate anti-caching headers as per the risk of the application







6.4

Verify that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies) does not contain sensitive data or PII







7.1

Verify that the same encoding style is used between the client and the server







7.2

Verify that access to administration and management functions within the Web Service Application is limited to web service administrators







7.3

Verify that XML or JSON schema is in place and verified before accepting input







7.4

Verify the use of session-based authentication and authorization. Please refer to sections V1, V2, and V3 above for further guidance. Avoid the use of static "API keys" and similar







8.1

Verify that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content







8.2

Verify that untrusted file data submitted to the application is not used directly with file I/O commands







8.3

Verify that untrusted data is not used within inclusion, class loader, or reflection capabilities to prevent remote/local file inclusion vulnerabilities





